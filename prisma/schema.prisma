generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum AssetType {
  password
  card
  contact
  note
  document
  link
}

enum CardType {
  AMEX
  VISA
  VISA_CREDIT
  MASTERCARD
  MASTERCARD_CREDIT
  REWARDS
  MEMBERSHIP
}

model BlogEntry {
  id               Int         @id @default(autoincrement()) @db.Integer
  date             DateTime    @default(now()) @db.Date
  draft            Boolean
  archieved        Boolean     @default(false)
  title            Json
  content          Json
  category         String[]
  shortDescription Json
  updated          DateTime    @updatedAt
  images           BlogImage[]
}

model BlogImage {
  id          Int       @id @default(autoincrement()) @db.Integer
  blogEntryId Int
  imageUrl    String    @db.VarChar(255)
  altText     Json
  height      Int
  isCover     Boolean   @default(false)
  width       Int
  title       Json
  views       Int       @default(0)
  colour      Int[]
  blogEntry   BlogEntry @relation(fields: [blogEntryId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  assets        Asset[]
  secureInfoPasswordHash  String?
  secureInfoPasswordSalt  String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model NewsletterSubscriber {
  id            String  @id @default(cuid())
  email         String  @unique
  emailVerified Boolean @default(false)
}

model Asset {
  id        String    @id @default(cuid())
  created   DateTime  @default(now())
  updated   DateTime  @updatedAt
  accessed  DateTime  @default(now())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  tags      String[]
  assetType AssetType

  password Password?
  card     Card?
  contact  Contact?
  note     Note?
  document Document?
  link     Link?
}

model Password {
  id             String   @id @default(cuid())
  assetId        String   @unique
  url            String?
  email          String?
  username       String?
  passwordHash   String
  additionalInfo String?  @db.Text
  asset          Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model Card {
  id             String    @id @default(cuid())
  assetId        String    @unique
  asset          Asset     @relation(fields: [assetId], references: [id], onDelete: Cascade)
  type           CardType
  cardNumber     String
  expieryDate    DateTime? @db.Date
  validFrom      DateTime? @db.Date
  sortCode       String?
  AccountNumber  String?
  secureCodeHash String?
  secureCodeSalt String?
  pinHash        String?
  pinSalt        String?
  additionalInfo String?   @db.Text
}

model Contact {
  id             String   @id @default(cuid())
  assetId        String   @unique
  asset          Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  firstName      String
  lastName       String?
  phoneNumbers   String[]
  emailAddresses String[]
  birthday       String?
  addresses      String[]
  additionalInfo String?  @db.Text
}

model Note {
  id      String @id @default(cuid())
  assetId String @unique
  asset   Asset  @relation(fields: [assetId], references: [id], onDelete: Cascade)
  content String @db.Text
}

model Document {
  id      String @id @default(cuid())
  assetId String @unique
  asset   Asset  @relation(fields: [assetId], references: [id], onDelete: Cascade)
  url     String
}

model Link {
  id      String @id @default(cuid())
  assetId String @unique
  asset   Asset  @relation(fields: [assetId], references: [id], onDelete: Cascade)
  url     String
}
